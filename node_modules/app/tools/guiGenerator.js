'use strict';

var fs = require('fs');
var url = require('url');
var mime = require('mime-types');
var zlib = require('zlib');
var async = require('async');

var _this = {
    fileCache:{},

	handle: function(request, response){
        var parsedURL = url.parse(request.url, true);

        var encoding = request.headers['accept-encoding'];
        var searchWord = 'gzip';
        var useGzip = false;

        var sendResult = function(html, gzipped, contentType) {
            if (encoding!=null && useGzip===true) {
                response.writeHead(200, {
                    'Content-Type': contentType,
                    'Content-Encoding': 'gzip'
                });
                response.end(gzipped);
            } else {
                response.writeHead(200, {
                    'Content-Type': contentType
                });
                response.end(html);
            }
        };

        var routeGUI = function() {
            switch(parsedURL.pathname) {
                case '/': {
                    if (_this.fileCache['./webroot/index.html']!=null) {
                        sendResult(
                            _this.fileCache['./webroot/index.html'].html,
                            _this.fileCache['./webroot/index.html'].gzipped,
                            _this.fileCache['./webroot/index.html'].fileType
                        );
                    } else {
                        fs.readFile('./webroot/index.html', function(err, html){
                            zlib.gzip(html, function(err,res){
                                _this.fileCache['./webroot/index.html'] = {
                                    "html":html,
                                    "gzipped":res,
                                    "fileType":'text/html'
                                };
                                sendResult(html, res, 'text/html');
                            });
                        });
                    }
                } break;
                case '/benchmark': {
                    var benchmarkStr = "BENCHMARK";
                    response.writeHead(200, {
                        'Content-Type': 'text/plain'
                    });
                    response.end(benchmarkStr);
                } break;
                default: {
                    if (_this.fileCache['./webroot'+parsedURL.pathname]!=null) {
                        sendResult(
                            _this.fileCache['./webroot'+parsedURL.pathname].html,
                            _this.fileCache['./webroot'+parsedURL.pathname].gzipped,
                            _this.fileCache['./webroot'+parsedURL.pathname].fileType
                        );
                    } else {
                        fs.readFile('./webroot'+parsedURL.pathname, function(err, file) {
                            if (err==null) {
                                zlib.gzip(file, function(err,res){
                                    let fileType = mime.lookup('./webroot'+parsedURL.pathname);
                                    _this.fileCache['./webroot'+parsedURL.pathname] = {
                                        "html":file,
                                        "gzipped":res,
                                        "fileType":fileType
                                    };
                                    sendResult(file, res, fileType);
                                });
                            } else {
                                if (_this.fileCache['./webroot/404.html']!=null) {
                                    sendResult(
                                        _this.fileCache['./webroot/404.html'].html,
                                        _this.fileCache['./webroot/404.html'].gzipped,
                                        _this.fileCache['./webroot/404.html'].fileType
                                    );
                                } else {
                                    fs.readFile('./webroot/404.html', function(err, html) {
                                        zlib.gzip(html, function(err,res){
                                            _this.fileCache['./webroot/404.html'] = {
                                                "html":html,
                                                "gzipped":res,
                                                "fileType":'text/html'
                                            };
                                            sendResult(html, res, 'text/html');
                                        });
                                    });
                                }
                            }
                        });
                    }
                } break;
            }
        };

        if (encoding!=null) { // if encoding is not null, there's a chance that gzip is accepted
            var start = 0;
            var end = encoding.length-searchWord.length;
            var curr = start;
            if (end<0) { // if encoding is shorter than the word 'gzip', it can't be gzip.
                routeGUI();
            } else {
                // Search for 'gzip' encoding (async)
                async.whilst(
                    function(){
                        if (curr<=end) {
                            var test = true;
                            for (var i = curr; i < curr+searchWord.length; i++) {
                                if (encoding.charAt(i)!==searchWord.charAt(i-curr)) {
                                    test = false;
                                }
                            }
                            if (test===true) { // gzip encoding is accepted, get out of loop and route GUI.
                                useGzip = true;
                                return false;
                            } else {
                                return true;
                            }
                        } else {
                            return false;
                        }
                    },
                    function(callback){
                        curr++;
                        async.setImmediate(function(){
                            callback();
                        });
                    },
                    function(){
                        routeGUI();
                    }
                );
            }
        } else {
            routeGUI();
        }
	},

    clearCache:function(){
        _this.fileCache = {};
    },

    init:function(){
        process.on('message', function(data){
            if (data!=null && data.messageType==="clearCache") {
                _this.clearCache();
            }
        });
    }
};

module.exports = _this;

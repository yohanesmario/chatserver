'use strict';

var fs = require('fs');
var url = require('url');
var mime = require('mime-types');
var zlib = require('zlib');

var _this = {
    fileCache:{},

	handle: function(request, response){
        var parsedURL = url.parse(request.url, true);

        var encoding = request.headers['accept-encoding'];
        var useGzip = false;

        var sendResult = function(html, gzipped, contentType, statusCode) {
            if (statusCode==null) {
                statusCode = 200;
            }
            if (encoding!=null && useGzip===true) {
                response.writeHead(statusCode, {
                    'Content-Type': contentType,
                    'Content-Encoding': 'gzip'
                });
                response.end(gzipped);
            } else {
                response.writeHead(statusCode, {
                    'Content-Type': contentType
                });
                response.end(html);
            }
        };

        var routeGUI = function() {
            if (_this.fileCache['./webroot'+parsedURL.pathname]!=null) {
                sendResult(
                    _this.fileCache['./webroot'+parsedURL.pathname].html,
                    _this.fileCache['./webroot'+parsedURL.pathname].gzipped,
                    _this.fileCache['./webroot'+parsedURL.pathname].fileType,
                    _this.fileCache['./webroot'+parsedURL.pathname].statusCode
                );
            } else {
                fs.readFile('./webroot'+parsedURL.pathname, function(err, file) {
                    if (err==null) {
                        zlib.gzip(file, function(err,res){
                            let fileType = mime.lookup('./webroot'+parsedURL.pathname);
                            _this.fileCache['./webroot'+parsedURL.pathname] = {
                                "html":file,
                                "gzipped":res,
                                "fileType":fileType,
                                "statusCode":200
                            };
                            sendResult(file, res, fileType, 200);
                        });
                    } else {
                        let generate404 = function(){
                            if (_this.fileCache['./webroot/404.html']!=null) {
                                sendResult(
                                    _this.fileCache['./webroot/404.html'].html,
                                    _this.fileCache['./webroot/404.html'].gzipped,
                                    _this.fileCache['./webroot/404.html'].fileType,
                                    _this.fileCache['./webroot/404.html'].statusCode
                                );
                            } else {
                                fs.readFile('./webroot/404.html', function(err, html) {
                                    zlib.gzip(html, function(err,res){
                                        _this.fileCache['./webroot'+parsedURL.pathname] = {
                                            "html":html,
                                            "gzipped":res,
                                            "fileType":'text/html',
                                            "statusCode":404
                                        };
                                        _this.fileCache['./webroot/404.html'] = {
                                            "html":html,
                                            "gzipped":res,
                                            "fileType":'text/html',
                                            "statusCode":404
                                        };
                                        sendResult(html, res, 'text/html', 404);
                                    });
                                });
                            }
                        };

                        fs.readFile('./webroot'+parsedURL.pathname+"/index.html", function(err, file){
                            if (err==null) {
                                zlib.gzip(file, function(err,res){
                                    _this.fileCache['./webroot'+parsedURL.pathname] = {
                                        "html":file,
                                        "gzipped":res,
                                        "fileType":"text/html",
                                        "statusCode":200
                                    };
                                    sendResult(file, res, "text/html", 200);
                                });
                            } else {
                                fs.readFile('./webroot'+parsedURL.pathname+"/index.htm", function(err, file){
                                    if (err==null) {
                                        zlib.gzip(file, function(err,res){
                                            _this.fileCache['./webroot'+parsedURL.pathname] = {
                                                "html":file,
                                                "gzipped":res,
                                                "fileType":"text/html",
                                                "statusCode":200
                                            };
                                            sendResult(file, res, "text/html", 200);
                                        });
                                    } else {
                                        generate404();
                                    }
                                });
                            }
                        });
                    }
                });
            }
        };

        if (encoding!=null) { // if encoding is not null, there's a chance that gzip is accepted
            encoding = encoding.split(",");
            for (let i = 0; i < encoding.length; i++) {
                if (encoding[i].trim()==='gzip') {
                    useGzip = true;
                    i = encoding.length;
                }
            }
        }

        routeGUI();
	},

    clearCache:function(){
        _this.fileCache = {};
    },

    init:function(){
        process.on('message', function(data){
            if (data!=null && data.messageType==="clearCache") {
                _this.clearCache();
            }
        });
    }
};

module.exports = _this;

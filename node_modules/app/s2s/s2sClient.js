'use strict';

var http = require('http');
var cluster = require('cluster');
var async = require('async');
var xml2js = require('xml2js');
var logWrapper = require('app/tools/logWrapper');
var parseString = xml2js.parseString;
var xmlBuilder = new xml2js.Builder();

var _this = {
    dbWrapper:null,
    cfg:null,

    post: function(host, port, data, success, error, timeout){
        var options = {
            hostname: host,
            port: port,
            path: '/',
            method: 'POST',
            headers: {
                'Connection':'keep-alive',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': data.length
            }
        };
        var req = http.request(options, function(res){
            res.setEncoding('utf8');
            var result = "";
            res.on('data', function (chunk) {
                result += chunk;
            });
            res.on('end', function() {
                if (success!=null) {
                    success(result);
                }
            });
        });
        req.on('error', function(e) {
            if (error!=null) {
                error(e);
            }
        });
        req.on('socket', function (socket) {
            if (timeout==null) {
                socket.setTimeout(30*1000); // default: 30s timeout
            } else {
                socket.setTimeout(timeout);
            }
            socket.on('timeout', function() {
                req.abort();
            });
        });
        req.write(data);
        req.end();
    },

    initConnection: function(cfg, cb){
        if (cfg.serverHook!=null) {
            let parseResult = function(result){
                parseString(result, function(err, data){
                    if (data!=null && data.response!=null && data.response.$!=null && data.response.$.type!=null && data.response.$.type==='s2s') {
                        var maxCount = data.response.servers[0].server.length;
                        var countNow = 0;
                        var loginCallback = function(ip, port, r){
                            parseString(r, function(err, d){
                                var ipPort = ip+":"+port;
                                var res = _this.dbWrapper.servers.find({'ipPort': ipPort});
                                if (res!=null && res.length===1 && res[0].mysessid==null) {
                                    res[0].mysessid = d.response.sessid[0];
                                    _this.dbWrapper.servers.update(res[0]);

                                    if (d.response.messages[0].message!=null) {
                                        for (let i = 0; i < d.response.messages[0].message.length; i++) {
                                            var msgTemp = _this.dbWrapper.chatHistory.find({"$and":[
                                                {"username":d.response.messages[0].message[i].$.username},
                                                {"time":parseInt(d.response.messages[0].message[i].$.time)},
                                                {"message":d.response.messages[0].message[i].$.message}
                                            ]});
                                            if (!(msgTemp!=null && msgTemp.length>0)) {
                                                var msg = _this.dbWrapper.chatHistory.insert({
                                                    "username":d.response.messages[0].message[i].$.username,
                                                    "time":parseInt(d.response.messages[0].message[i].$.time),
                                                    "message":d.response.messages[0].message[i].$.message
                                                });
                                                _this.dbWrapper.queueC2SWorkerChatSend({
                                                    '$loki':msg.$loki,
                                                    'username':msg.username,
                                                    'time':msg.time,
                                                    'message':msg.message
                                                });
                                            }
                                        }
                                        _this.dbWrapper.queueSaving();
                                    }

                                    if (d.response.userHistories[0].userHistory!=null) {
                                        for (let i = 0; i < d.response.userHistories[0].userHistory.length; i++) {
                                            var usrHistoryTemp = _this.dbWrapper.userHistory.find({"$and":[
                                                {"username":d.response.userHistories[0].userHistory[i].$.username},
                                                {"timestamp":parseInt(d.response.userHistories[0].userHistory[i].$.timestamp)},
                                                {"action":d.response.userHistories[0].userHistory[i].$.action}
                                            ]});
                                            if (!(usrHistoryTemp!=null && usrHistoryTemp.length>0)) {
                                                _this.dbWrapper.userHistory.insert({
                                                    "username":d.response.userHistories[0].userHistory[i].$.username,
                                                    "timestamp":parseInt(d.response.userHistories[0].userHistory[i].$.timestamp),
                                                    "action":d.response.userHistories[0].userHistory[i].$.action
                                                });
                                            }
                                        }
                                        _this.dbWrapper.queueSaving();
                                    }

                                    if (d.response.users[0].user!=null) {
                                        let usrRes = [];
                                        for (let i = 0; i < d.response.users[0].user.length; i++) {
                                            var usrTemp = _this.dbWrapper.users.find({"username":d.response.users[0].user[i].$.username});

                                            if (!(usrTemp!=null && usrTemp.length>0)) {
                                                var loggedIn = d.response.users[0].user[i].$.loggedIn;
                                                if (loggedIn==="false") {loggedIn=false;} else {loggedIn=true;}
                                                var usrSessid = d.response.users[0].user[i].$.sessid;
                                                if (usrSessid==="null") {usrSessid=null;}
                                                var handlerIpPort = d.response.users[0].user[i].$.handlerIpPort;
                                                if (loggedIn===false) {handlerIpPort=null;}
                                                _this.dbWrapper.users.insert({
                                                    "username":d.response.users[0].user[i].$.username,
                                                    "password":d.response.users[0].user[i].$.password,
                                                    "loggedIn":loggedIn,
                                                    "sessid":usrSessid,
                                                    "heartbeat":null,
                                                    "handledByMe":false,
                                                    "handlerIpPort":handlerIpPort
                                                });

                                                if (loggedIn===true) {
                                                    usrRes.push({'username':d.response.users[0].user[i].$.username});
                                                }
                                            }
                                        }
                                        for (let key in cluster.workers) {
                                            if (cluster.workers.hasOwnProperty(key)) {
                                                cluster.workers[key].send({
                                                    messageType:"c2sWorkerLogin",
                                                    payload:usrRes
                                                });
                                            }
                                        }
                                        _this.dbWrapper.queueSaving();
                                    }

                                    async.setImmediate(function(){
                                        if (cb!=null) {
                                            countNow++;
                                            if (countNow===maxCount) {
                                                cb();
                                            }
                                        }
                                    });
                                }
                            });
                        };

                        var registerCallback = function(ip, port, r){
                            parseString(r, function(){
                                _this.loginServer(ip, port, function(loginResult){
                                    loginCallback(ip, port, loginResult);
                                }, function(){
                                    async.setImmediate(function(){
                                        if (cb!=null) {
                                            countNow++;
                                            if (countNow===maxCount) {
                                                cb();
                                            }
                                        }
                                    });
                                });
                            });
                        };

                        var registerErrorCallback = function(){
                            async.setImmediate(function(){
                                if (cb!=null) {
                                    countNow++;
                                    if (countNow===maxCount) {
                                        cb();
                                    }
                                }
                            });
                        };

                        cfg.config.serverHook = [];
                        cfg.serverHook = [];
                        for (var i = 0; i < data.response.servers[0].server.length; i++) {
                            if (data.response.servers[0].server[i].$.ip!==cfg.identifier.ip || parseInt(data.response.servers[0].server[i].$.port)!==parseInt(cfg.identifier.port)) {
                                _this.registerServer(
                                    data.response.servers[0].server[i].$.ip,
                                    data.response.servers[0].server[i].$.port,
                                    data.response.servers[0].server[i].$.password,
                                    registerCallback,
                                    registerErrorCallback
                                );
                                cfg.config.serverHook.push({
                                    'ip':data.response.servers[0].server[i].$.ip,
                                    'port':parseInt(data.response.servers[0].server[i].$.port),
                                });
                                cfg.serverHook.push({
                                    'ip':data.response.servers[0].server[i].$.ip,
                                    'port':parseInt(data.response.servers[0].server[i].$.port),
                                });
                            } else {
                                maxCount--;
                            }
                        }
                        _this.dbWrapper.queueSaving();
                    } else {
                        cfg.config.serverHook = [];
                        cfg.serverHook = [];
                        _this.dbWrapper.queueSaving();
                    }
                });
            };

            if (cfg.serverHook.constructor===Array) {
                let i=0;
                let probeList = function(){
                    if (i<cfg.serverHook.length) {
                        _this.listRegisteredServer(cfg.serverHook[i].ip, cfg.serverHook[i].port, function(result){
                            parseResult(result);
                        }, function(){
                            i++;
                            probeList();
                        });
                    } else {
                        cfg.config.serverHook = [];
                        cfg.serverHook = [];
                        _this.dbWrapper.queueSaving();
                        async.setImmediate(function(){
                            cb();
                        });
                    }
                };
                probeList();
            } else {
                _this.listRegisteredServer(cfg.serverHook.ip, cfg.serverHook.port, function(result){
                    parseResult(result);
                });
            }
        } else {
            cfg.config.serverHook = [];
            cfg.serverHook = [];
            _this.dbWrapper.queueSaving();
        }
    },

    listRegisteredServer: function(host, port, cb, error, timeout){
        _this.post(host, port, xmlBuilder.buildObject({
            request:{
                $:{type:"s2s"},
                "method":["listRegisteredServer"]
            }
        }), cb, function(e){
            if (error!=null) {
                error(e);
            } else {
                logWrapper.log('problem with request: ' + e.message);
            }
        }, timeout);
    },

    registerServer:function(host, port, hash, cb, errorCB){
        var ipPort = host+":"+port;
        _this.dbWrapper.servers.insert({
            "ipPort":ipPort,
            "ip":host,
            "port":parseInt(port),
            "password":hash,
            "loggedIn":false,
            "sessid":null,
            "mysessid":null,
            "heartbeat":null
        });

        for (let key in cluster.workers) {
            if (cluster.workers.hasOwnProperty(key)) {
                cluster.workers[key].send({
                    messageType:"serverRegistration",
                    payload:{
                        "ip":host,
                        "port":port
                    }
                });
            }
        }

        var data = xmlBuilder.buildObject({
            request:{
                $:{type:"s2s"},
                "method":["registrasiServer"],
                "param":[{
                    "$":{
                        "ip":_this.cfg.identifier.ip,
                        "port":_this.cfg.identifier.port,
                        "password":_this.cfg.password
                    }
                }]
            }
        });
        _this.post(host, port, data, function(result){
            cb(host, port, result);
        }, function(e){
            if (errorCB==null) {
                logWrapper.log('problem with request: ' + e.message);
            } else {
                errorCB(e);
            }
        });
    },

    loginServer:function(host, port, cb, errorCB){
        var data = xmlBuilder.buildObject({
            request:{
                $:{type:"s2s"},
                "method":["loginServer"],
                "param":[{
                    "$":{
                        "ip":_this.cfg.identifier.ip,
                        "port":_this.cfg.identifier.port,
                        "password":_this.cfg.password
                    }
                }]
            }
        });
        _this.post(host, port, data, cb, function(e){
            if (errorCB==null) {
                logWrapper.log('problem with request: ' + e.message);
            } else {
                errorCB(e);
            }
        });
    },

    serverHeartbeat:function(host, port, sessid, cb){
        var data = xmlBuilder.buildObject({
            request:{
                $:{type:"s2s"},
                "method":["serverHeartbeat"],
                "param":[{
                    "$":{
                        "sessid":sessid
                    }
                }]
            }
        });
        _this.post(host, port, data, cb, function(e){
            logWrapper.log('problem with request: ' + e.message);
        });
    },

    startHeartbeat:function(){
        var timeout = 3*1000;
        var beat = function(){
            var srv = _this.dbWrapper.servers.find({"$and":[
                {"loggedIn":true},
                {"mysessid":{"$ne":null}}
            ]});
            var emptyFunction = function(){};
            for (var i = 0; i < srv.length; i++) {
                _this.serverHeartbeat(srv[i].ip, srv[i].port, srv[i].mysessid, emptyFunction);
            }
            setTimeout(function(){
                beat();
            }, timeout);
        };
        setTimeout(function(){
            beat();
        }, timeout);
    },

    chatSendClient:function(host, port, message, cb){
        var data = xmlBuilder.buildObject({
            request:{
                $:{type:"s2s"},
                "method":["chatSendClient"],
                "param":[{
                    "$":{
                        "username":message.username,
                        "time":message.time,
                        "message":message.message
                    }
                }]
            }
        });
        _this.post(host, port, data, cb, function(e){
            logWrapper.log('problem with request: ' + e.message);
        });
    },

    loginClient:function(username, csessid, ts, cb){
        var srv = _this.dbWrapper.servers.find({"$and":[
            {"loggedIn":true},
            {"mysessid":{"$ne":null}}
        ]});
        var errorHandler = function(e){
            logWrapper.log('problem with request: ' + e.message);
        };
        for (var i = 0; i < srv.length; i++) {
            var data = xmlBuilder.buildObject({
                request:{
                    $:{type:"s2s"},
                    "method":["loginClient"],
                    "param":[{
                        "$":{
                            "username":username,
                            "timestamp":ts,
                            "csessid":csessid,
                            "sessid":srv[i].mysessid
                        }
                    }]
                }
            });
            _this.post(srv[i].ip, srv[i].port, data, cb, errorHandler);
        }
    },

    logoutClient:function(csessid, ts, cb){
        var srv = _this.dbWrapper.servers.find({"$and":[
            {"loggedIn":true},
            {"mysessid":{"$ne":null}}
        ]});
        var errorHandler = function(e){
            logWrapper.log('problem with request: ' + e.message);
        };
        for (var i = 0; i < srv.length; i++) {
            var data = xmlBuilder.buildObject({
                request:{
                    $:{type:"s2s"},
                    "method":["logoutClient"],
                    "param":[{
                        "$":{
                            "csessid":csessid,
                            "timestamp":ts,
                            "sessid":srv[i].mysessid
                        }
                    }]
                }
            });
            _this.post(srv[i].ip, srv[i].port, data, cb, errorHandler);
        }
    },

    registerClient:function(username, hash, cb){
        var srv = _this.dbWrapper.servers.find({"$and":[
            {"loggedIn":true},
            {"mysessid":{"$ne":null}}
        ]});
        var errorHandler = function(e){
            logWrapper.log('problem with request: ' + e.message);
        };
        for (var i = 0; i < srv.length; i++) {
            var data = xmlBuilder.buildObject({
                request:{
                    $:{type:"s2s"},
                    "method":["registrasiClient"],
                    "param":[{
                        "$":{
                            "username":username,
                            "password":hash,
                            "sessid":srv[i].mysessid
                        }
                    }]
                }
            });
            _this.post(srv[i].ip, srv[i].port, data, cb, errorHandler);
        }
    },

    logoutServer:function(cb, error){
        var srv = _this.dbWrapper.servers.find({"$and":[
            {"loggedIn":true},
            {"mysessid":{"$ne":null}}
        ]});
        var errorHandler = function(e){
            if (error!=null) {
                error(e);
            } else {
                logWrapper.log('problem with request: ' + e.message);
            }
        };
        for (var i = 0; i < srv.length; i++) {
            var data = xmlBuilder.buildObject({
                request:{
                    $:{type:"s2s"},
                    "method":["logoutServer"],
                    "param":[{
                        "$":{
                            "sessid":srv[i].mysessid
                        }
                    }]
                }
            });

            _this.post(srv[i].ip, srv[i].port, data, cb, errorHandler);

            srv[i].loggedIn = false;
            srv[i].sessid = null;
            srv[i].mysessid = null;
            srv[i].heartbeat = null;
            _this.dbWrapper.servers.update(srv[i]);
        }
    },

    probeHooks:function(cfg, cb){
        if (cfg!=null && cfg.serverHook!=null) {
            if (cfg.serverHook.constructor===Array) {
                let i=0;
                let probeList = function(){
                    if (i<cfg.serverHook.length) {
                        console.log("Probing server "+cfg.serverHook[i].ip+":"+cfg.serverHook[i].port);
                        _this.listRegisteredServer(cfg.serverHook[i].ip, cfg.serverHook[i].port, function(){
                            async.setImmediate(function(){
                                cb(true);
                            });
                        }, function(){
                            i++;
                            probeList();
                        }, 3000);
                    } else {
                        async.setImmediate(function(){
                            cb(false);
                        });
                    }
                };
                probeList();
            } else {
                _this.listRegisteredServer(cfg.serverHook.ip, cfg.serverHook.port, function(){
                    async.setImmediate(function(){
                        cb(true);
                    });
                }, function(){
                    async.setImmediate(function(){
                        cb(false);
                    });
                });
            }
        } else {
            async.setImmediate(function(){
                cb(false);
            });
        }
    }
};

module.exports = _this;

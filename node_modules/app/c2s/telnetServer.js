'use strict';

var net = require('net');
var cluster = require('cluster');
var crypto = require('crypto');
var sha512 = null;
var cfg = require('app/tools/readArgv').init(process);
var logWrapper = require('app/tools/logWrapper');
var uniqid = require('app/tools/uniqid');
var connections = [];
var elevatedConnections = [];
var serverSubscribers = [];
var serverList = [];
var callbackHashTable = {};
var loggedinUsers = {};

var logoutUser = function(conn){
    let requestID = uniqid.next();
    let request = {
        'method':['logout'],
        'param':[{
            '$':{
                'sessid':((conn.sessid!=null)?conn.sessid:"doesn't exist")
            }
        }]
    };

    callbackHashTable['c2sWorker'+requestID] = function(){
        delete callbackHashTable['c2sWorker'+requestID];
    };
    process.send({
        messageType:"c2sMaster",
        payload:{
            reqID:requestID,
            workerID:cluster.worker.id,
            data:request
        }
    });
};

var telnetServer = net.createServer(function(c){
    connections.push(c);
    c.buffer = "";
    c.on('data', function(data){
        if (c.ended==null) {
            let str = data.toString();
            if (str.length===1 && str.charCodeAt(0)===8) {
                if (c.buffer.length>0) {
                    c.buffer = c.buffer.substring(0,c.buffer.length-1);
                }
            } else {
                if (str.search("\r")>-1 || str.search("\n")>-1) {
                    str = c.buffer + str;
                    c.buffer = '';

                    data = str.replace(/\r/g, "").replace(/\n/g, "").replace(/\\;/g, "::semicolon::").split(";");
                    for (let i = 0; i < data.length; i++) {
                        data[i] = data[i].trim().replace(/::semicolon::/g, ";");
                    }
                    switch (data[0]) {
                        case 'register': {
                            if (data.length===3) {
                                let requestID = uniqid.next();
                                let hash = null;
                                let request = {
                                    'method':['register'],
                                    'param':[{
                                        '$':{
                                            'user':data[1],
                                            'password':data[2]
                                        }
                                    }]
                                };
                                sha512 = crypto.createHash('sha512');
                                sha512.update(request.param[0].$.password);
                                hash = sha512.digest('hex');

                                callbackHashTable['c2sWorker'+requestID] = function(data){
                                    let res = data.data.response;
                                    if (res.message!=null) {
                                        c.write("{" + res.status[0] + "}");
                                        c.write(" " + res.message[0]);
                                        c.write("\r\n");
                                    } else {
                                        c.write("{" + res.status[0] + "}");
                                        c.write("\r\n");
                                    }

                                    delete callbackHashTable['c2sWorker'+requestID];
                                };
                                process.send({
                                    messageType:"c2sMaster",
                                    payload:{
                                        workerID:cluster.worker.id,
                                        reqID:requestID,
                                        hash:hash,
                                        data:request
                                    }
                                });
                            } else {
                                c.write("Error: please specify username and password!\r\n");
                            }
                        } break;
                        case 'login': {
                            if (c.sessid!=null) {
                                c.write('{you\'re already logged-in}\r\n');
                            } else {
                                if (data.length===3) {
                                    let requestID = uniqid.next();
                                    let hash = null;
                                    let sessid = null;
                                    let request = {
                                        'method':['login'],
                                        'param':[{
                                            '$':{
                                                'user':data[1],
                                                'password':data[2]
                                            }
                                        }]
                                    };
                                    sha512 = crypto.createHash('sha512');
                                    sha512.update(request.param[0].$.password);
                                    hash = sha512.digest('hex');
                                    sessid = request.param[0].$.user + "::w" + cluster.worker.id + "::" + crypto.randomBytes(16).toString('base64');

                                    callbackHashTable['c2sWorker'+requestID] = function(data){
                                        let res = data.data.response;
                                        if (res.message!=null) {
                                            c.write("{" + res.status[0] + "}");
                                            c.write(" " + res.message[0]);
                                            c.write("\r\n");
                                        } else {
                                            c.write("{" + res.status[0] + "}");
                                            c.write("\r\n");
                                            for (let i = 0; i < connections.length; i++) {
                                                if (connections[i]===c) {
                                                    connections.splice(i,1);
                                                }
                                            }
                                            c.sessid = res.sessid[0];
                                            elevatedConnections.push(c);
                                        }

                                        delete callbackHashTable['c2sWorker'+requestID];
                                    };
                                    process.send({
                                        messageType:"c2sMaster",
                                        payload:{
                                            workerID:cluster.worker.id,
                                            reqID:requestID,
                                            hash:hash,
                                            sessid:sessid,
                                            data:request
                                        }
                                    });
                                } else {
                                    c.write("Error: please specify username and password!\r\n");
                                }
                            }
                        } break;
                        case 'logout': {
                            let requestID = uniqid.next();
                            let request = {
                                'method':['logout'],
                                'param':[{
                                    '$':{
                                        'sessid':((c.sessid!=null)?c.sessid:"doesn't exist")
                                    }
                                }]
                            };

                            callbackHashTable['c2sWorker'+requestID] = function(data){
                                let res = data.data.response;
                                if (res.message!=null) {
                                    c.write("{" + res.status[0] + "}");
                                    c.write(" " + res.message[0]);
                                    c.write("\r\n");
                                } else {
                                    c.write("{" + res.status[0] + "}");
                                    c.write("\r\n");
                                    let idxElev = elevatedConnections.indexOf(c);
                                    if (idxElev>-1) {
                                        elevatedConnections.splice(idxElev,1);
                                    }
                                    let idxSubs = serverSubscribers.indexOf(c);
                                    if (idxSubs>-1) {
                                        serverSubscribers.splice(idxSubs,1);
                                    }
                                    c.end("{connection is closed}\r\n");
                                }

                                delete callbackHashTable['c2sWorker'+requestID];
                            };
                            process.send({
                                messageType:"c2sMaster",
                                payload:{
                                    reqID:requestID,
                                    workerID:cluster.worker.id,
                                    data:request
                                }
                            });
                        } break;
                        case 'exit': {
                            c.write("{accepted}\r\n");
                            c.end("{connection is closed}\r\n");
                        } break;
                        case 'chatsend': {
                            if (data.length===2) {
                                let requestID = uniqid.next();
                                let request = {
                                    'method':['chatSend'],
                                    'param':[{
                                        '$':{
                                            'sessid':((c.sessid!=null)?c.sessid:"doesn't exist"),
                                            'message':data[1]
                                        }
                                    }]
                                };

                                callbackHashTable['c2sWorker'+requestID] = function(data){
                                    let res = data.data.response;
                                    if (res.message!=null) {
                                        c.write("{" + res.status[0] + "}");
                                        c.write(" " + res.message[0]);
                                        c.write("\r\n");
                                    } else {
                                        c.write("{" + res.status[0] + "}");
                                        c.write("\r\n");
                                    }

                                    delete callbackHashTable['c2sWorker'+requestID];
                                };
                                process.send({
                                    messageType:"c2sMaster",
                                    payload:{
                                        reqID:requestID,
                                        workerID:cluster.worker.id,
                                        data:request
                                    }
                                });
                            } else {
                                if (data.length===1) {
                                    c.write("Error: please write a message!\r\n");
                                } else {
                                    c.write("Error: don't use ';' in your message!\r\n");
                                }
                            }
                        } break;
                        case 'chatget': {
                            if (data.length===2) {
                                let requestID = uniqid.next();
                                let request = {
                                    'method':['chatGet'],
                                    'param':[{
                                        '$':{
                                            'time':data[1]
                                        }
                                    }]
                                };

                                callbackHashTable['c2sWorker'+requestID] = function(data){
                                    let res = data.data.response;
                                    if (res.message!=null) {
                                        c.write("{" + res.status[0] + "}");
                                        c.write(" " + res.message[0]);
                                        c.write("\r\n");
                                    } else {
                                        c.write("{" + res.status[0] + "}");
                                        c.write("\r\n");
                                        if (res.messages!=null && res.messages.length>0) {
                                            for (let i = res.messages[0].message.length-1; i >= 0; i--) {
                                                c.write(
                                                    "[" + res.messages[0].message[i].$.time + "] <" + res.messages[0].message[i].$.username + ">: " +
                                                    res.messages[0].message[i].$.message + "\r\n"
                                                );
                                            }
                                        } else {
                                            c.write('{no messages}\r\n');
                                        }
                                    }

                                    delete callbackHashTable['c2sWorker'+requestID];
                                };
                                process.send({
                                    messageType:"c2sMaster",
                                    payload:{
                                        reqID:requestID,
                                        workerID:cluster.worker.id,
                                        data:request
                                    }
                                });
                            } else {
                                if (data.length===1) {
                                    c.write("Error: please specify a time!\r\n");
                                } else {
                                    c.write("Error: you only need to supply time.\r\n");
                                }
                            }
                        } break;
                        case 'listloggedin': {
                            if (c.sessid!=null) {
                                c.write("{accepted}\r\n");
                                for (let key in loggedinUsers) {
                                    if (loggedinUsers.hasOwnProperty(key)) {
                                        c.write("<" + key + ">: logged-in\r\n");
                                    }
                                }
                            } else {
                                c.write("{rejected} not logged-in\r\n");
                            }
                        } break;
                        case 'serversubscribe': {
                            if (serverSubscribers.indexOf(c)===-1) {
                                serverSubscribers.push(c);
                                c.write("{accepted}\r\n");
                                for (let i = 0; i < serverList.length; i++) {
                                    c.write("Server: "+serverList[i].ip+":"+serverList[i].port+"\r\n");
                                }
                            } else {
                                c.write("{rejected} already subscribed\r\n");
                            }
                        } break;
                    }
                } else {
                    let addToBuffer = true;
                    let ignored = [
                        "279165",
                        "279166",
                        "279167",
                        "279168"
                    ];
                    let s = "";
                    for (let k = 0; k < data.toString().length; k++) {
                        s += data.toString().charCodeAt(k);
                    }
                    for (var l = 0; l < ignored.length; l++) {
                        if (s===ignored[l]) {
                            addToBuffer = false;
                            l = ignored.length;
                        }
                    }

                    if (addToBuffer===true) {
                        c.buffer += str;
                    }
                }
            }
        }
    });
    c.on('end', function(){
        if (c.ended==null) {
            let requestID = uniqid.next();
            let request = {
                'method':['logout'],
                'param':[{
                    '$':{
                        'sessid':((c.sessid!=null)?c.sessid:"doesn't exist")
                    }
                }]
            };

            callbackHashTable['c2sWorker'+requestID] = function(){
                delete callbackHashTable['c2sWorker'+requestID];
            };
            process.send({
                messageType:"c2sMaster",
                payload:{
                    reqID:requestID,
                    workerID:cluster.worker.id,
                    data:request
                }
            });

            c.ended = true;
            let idxConn = connections.indexOf(c);
            if (idxConn>-1) {
                connections.splice(idxConn,1);
            }
            let idxElev = elevatedConnections.indexOf(c);
            if (idxElev>-1) {
                elevatedConnections.splice(idxElev,1);
            }
            let idxSubs = serverSubscribers.indexOf(c);
            if (idxSubs>-1) {
                serverSubscribers.splice(idxSubs,1);
            }
        }
    });

    try {
        c.write('Notification: ');
        if (cfg.ip==null) {
            c.write('You are connected to chat server using telnet on port '+cfg.telnetPort+'\r\n');
        } else {
            c.write('You are connected to chat server using telnet on address '+cfg.ip+':'+cfg.telnetPort+'\r\n');
        }
    } catch(e) {
        logWrapper.log("ERROR:");
        logWrapper.log(e);
    }
});
if (cfg.ip==null) {
    telnetServer.listen(cfg.telnetPort);
} else {
    telnetServer.listen(cfg.telnetPort, cfg.ip);
}

process.on('message', function(data){
    if (data.messageType!=null) {
        switch (data.messageType) {
            case "c2sWorker": {
                if (callbackHashTable["c2sWorker"+data.payload.reqID]!=null) {
                    callbackHashTable["c2sWorker"+data.payload.reqID](data.payload);
                }
            } break;
            case "c2sWorkerChatSend": {
                for (let i = 0; i < data.payload.length; i++) {
                    for (let j = 0; j < elevatedConnections.length; j++) {
                        try {
                            elevatedConnections[j].write(
                                "[" + data.payload[i].time + "] <" + data.payload[i].username + ">: " +
                                data.payload[i].message + "\r\n"
                            );
                        } catch(e) {
                            elevatedConnections[j].ended = true;
                            elevatedConnections.splice(j, 1);
                            let idxSubs = serverSubscribers.indexOf(elevatedConnections[j]);
                            if (idxSubs>-1) {
                                serverSubscribers.splice(idxSubs, 1);
                            }
                            logoutUser(elevatedConnections[j]);
                        }
                    }
                }
            } break;
            case "c2sWorkerLogin": {
                for (let i = 0; i < data.payload.length; i++) {
                    if (loggedinUsers[data.payload[i].username]==null) {
                        loggedinUsers[data.payload[i].username] = true;
                    }

                    for (let j = 0; j < elevatedConnections.length; j++) {
                        try {
                            elevatedConnections[j].write(
                                "<" + data.payload[i].username + ">: logged-in\r\n"
                            );
                        } catch(e) {
                            elevatedConnections[i].ended = true;
                            elevatedConnections.splice(i, 1);
                            let idxSubs = serverSubscribers.indexOf(elevatedConnections[i]);
                            if (idxSubs>-1) {
                                serverSubscribers.splice(idxSubs, 1);
                            }
                            logoutUser(elevatedConnections[i]);
                        }
                    }
                }
            } break;
            case "c2sWorkerLogout": {
                for (let i = 0; i < data.payload.length; i++) {
                    if (loggedinUsers[data.payload[i].username]===true) {
                        delete loggedinUsers[data.payload[i].username];
                    }

                    for (let j = 0; j < elevatedConnections.length; j++) {
                        try {
                            elevatedConnections[j].write(
                                "<" + data.payload[i].username + ">: logged-out\r\n"
                            );
                        } catch(e) {
                            elevatedConnections[i].ended = true;
                            elevatedConnections.splice(i, 1);
                            let idxSubs = serverSubscribers.indexOf(elevatedConnections[i]);
                            if (idxSubs>-1) {
                                serverSubscribers.splice(idxSubs, 1);
                            }
                            logoutUser(elevatedConnections[i]);
                        }
                    }
                }
            } break;
            case "serverRegistration": {
                serverList.push(data.payload);
                for (let i = 0; i < serverSubscribers.length; i++) {
                    try {
                        serverSubscribers[i].write("Server: "+data.payload.ip+":"+data.payload.port+"\r\n");
                    } catch(e) {
                        serverSubscribers[i].ended = true;
                        serverSubscribers.splice(i, 1);
                        let idxElev = elevatedConnections.indexOf(serverSubscribers[i]);
                        if (idxElev>-1) {
                            elevatedConnections.splice(idxElev, 1);
                        }
                        let idxConn = connections.indexOf(serverSubscribers[i]);
                        if (idxConn>-1) {
                            connections.splice(idxConn, 1);
                        }
                        if (serverSubscribers[i].sessid!=null) {
                            logoutUser(serverSubscribers[i]);
                        }
                    }
                }
            } break;
        }
    }
});

setInterval(function(){
    var doHeartbeat = function(c){
        let requestID = uniqid.next();
        let request = {
            'method':['heartbeat'],
            'param':[{
                '$':{
                    'sessid':c.sessid
                }
            }]
        };
        callbackHashTable['c2sWorker'+requestID] = function(){
            delete callbackHashTable['c2sWorker'+requestID];
        };
        process.send({
            messageType:"c2sMaster",
            payload:{
                reqID:requestID,
                workerID:cluster.worker.id,
                data:request
            }
        });
    };

    for (let i = 0; i < elevatedConnections.length; i++) {
        if (elevatedConnections[i].sessid!=null) {
            doHeartbeat(elevatedConnections[i]);
        }
    }
}, 5*60*1000);

// Make sure connections always active
setInterval(function(){
    for (let i = 0; i < connections.length; i++) {
        try {
            connections[i].write("\u0000");
        } catch(e) {
            // Error write
        }
    }
    for (let i = 0; i < elevatedConnections.length; i++) {
        try {
            elevatedConnections[i].write("\u0000");
        } catch(e) {
            // Error write
        }
    }
}, 30*1000);

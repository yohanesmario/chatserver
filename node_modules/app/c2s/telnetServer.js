'use strict';

var net = require('net');
var cluster = require('cluster');
var crypto = require('crypto');
var sha512 = null;
// var logWrapper = require('app/tools/logWrapper');
var uniqid = require('app/tools/uniqid');
var connections = [];
var elevatedConnections = [];
var callbackHashTable = {};

var telnetServer = net.createServer(function(c){
    connections.push(c);
    c.on('data', function(data){
        data = data.toString().replace(/\r/g, "").replace(/\n/g, "").split(";");
        switch (data[0]) {
            case 'login': {
                if (data.length===3) {
                    let requestID = uniqid.next();
                    let hash = null;
                    let sessid = null;
                    let request = {
                        'method':['login'],
                        'param':[{
                            '$':{
                                'user':data[1],
                                'password':data[2]
                            }
                        }]
                    };
                    sha512 = crypto.createHash('sha512');
                    sha512.update(request.param[0].$.password);
                    hash = sha512.digest('hex');
                    sessid = request.param[0].$.user + "::w" + cluster.worker.id + "::" + crypto.randomBytes(16).toString('base64');

                    callbackHashTable['c2sWorker'+requestID] = function(data){
                        let res = data.data.response;
                        if (res.message!=null) {
                            c.write("{" + res.status[0] + "}");
                            c.write(" " + res.message[0]);
                            c.write("\r\n");
                        } else {
                            c.write("{" + res.status[0] + "}");
                            c.write("\r\n");
                            for (let i = 0; i < connections.length; i++) {
                                if (connections[i]===c) {
                                    connections.splice(i,1);
                                }
                            }
                            c.sessid = res.sessid[0];
                            elevatedConnections.push(c);
                        }

                        delete callbackHashTable['c2sWorker'+requestID];
                    };
                    process.send({
                        messageType:"c2sMaster",
                        payload:{
                            workerID:cluster.worker.id,
                            reqID:requestID,
                            hash:hash,
                            sessid:sessid,
                            data:request
                        }
                    });
                } else {
                    c.write("Error: please specify username and password!\r\n");
                }
            } break;
            case 'logout': {
                let requestID = uniqid.next();
                let request = {
                    'method':['logout'],
                    'param':[{
                        '$':{
                            'sessid':((c.sessid!=null)?c.sessid:"doesn't exist")
                        }
                    }]
                };

                callbackHashTable['c2sWorker'+requestID] = function(data){
                    let res = data.data.response;
                    if (res.message!=null) {
                        c.write("{" + res.status[0] + "}");
                        c.write(" " + res.message[0]);
                        c.write("\r\n");
                    } else {
                        c.write("{" + res.status[0] + "}");
                        c.write("\r\n");
                        for (let i = 0; i < elevatedConnections.length; i++) {
                            if (elevatedConnections[i]===c) {
                                elevatedConnections.splice(i,1);
                            }
                        }
                        c.end("{connection is closed}\r\n");
                    }

                    delete callbackHashTable['c2sWorker'+requestID];
                };
                process.send({
                    messageType:"c2sMaster",
                    payload:{
                        reqID:requestID,
                        workerID:cluster.worker.id,
                        data:request
                    }
                });
            } break;
        }
    });
    c.on('end', function(){
        for (let i = 0; i < connections.length; i++) {
            if (connections[i]===c) {
                connections.splice(i,1);
            }
        }
        for (let i = 0; i < elevatedConnections.length; i++) {
            if (elevatedConnections[i]===c) {
                elevatedConnections.splice(i,1);
            }
        }
    });
});
telnetServer.listen(2337);

process.on('message', function(data){
    if (data.messageType!=null) {
        switch (data.messageType) {
            case "c2sWorker": {
                if (callbackHashTable["c2sWorker"+data.payload.reqID]!=null) {
                    callbackHashTable["c2sWorker"+data.payload.reqID](data.payload);
                }
            } break;
            case "c2sWorkerChatSend": {
                for (let i = 0; i < data.payload.length; i++) {
                    for (let j = 0; j < elevatedConnections.length; j++) {
                        elevatedConnections[j].write(
                            "<" + data.payload[i].username + ">: " +
                            data.payload[i].message + " [" + data.payload[i].time + "]\r\n"
                        );
                    }
                }
            } break;
        }
    }
});

setInterval(function(){
    var doHeartbeat = function(c){
        let requestID = uniqid.next();
        let request = {
            'method':['heartbeat'],
            'param':[{
                '$':{
                    'sessid':c.sessid
                }
            }]
        };
        callbackHashTable['c2sWorker'+requestID] = function(){
            delete callbackHashTable['c2sWorker'+requestID];
        };
        process.send({
            messageType:"c2sMaster",
            payload:{
                reqID:requestID,
                workerID:cluster.worker.id,
                data:request
            }
        });
    };

    for (let i = 0; i < elevatedConnections.length; i++) {
        if (elevatedConnections[i].sessid!=null) {
            doHeartbeat(elevatedConnections[i]);
        }
    }
}, 5*60*1000);